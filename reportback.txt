from flask import Flask, request, jsonify
import sqlite3
from datetime import datetime, timedelta
import random

app = Flask(__name__)

# Database setup
def init_db():
    conn = sqlite3.connect("complaints.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS complaints (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            staff_id INTEGER,
            reported_date TEXT,
            system_operation_level TEXT,
            complete_action_date TEXT,
            closing_by_date TEXT,
            closed_date TEXT
        )
    """)
    conn.commit()
    conn.close()

init_db()

# Function to generate random dates
def generate_random_date(days_ago=30):
    today = datetime.today()
    random_days = random.randint(1, days_ago)
    random_date = today - timedelta(days=random_days)
    return random_date.strftime("%Y-%m-%d")

# API to add a random complaint
@app.route("/add_complaint", methods=["POST"])
def add_complaint():
    staff_id = random.randint(1, 1000)
    reported_date = generate_random_date()
    system_operation_levels = ["Low", "Medium", "High", "Critical"]
    system_operation_level = random.choice(system_operation_levels)
    closing_by_date = generate_random_date(10)

    # 50% chance of being cleared
    is_cleared = random.random() > 0.5
    complete_action_date = generate_random_date(5) if is_cleared else None
    closed_date = generate_random_date(3) if is_cleared else None

    conn = sqlite3.connect("complaints.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO complaints (staff_id, reported_date, system_operation_level, complete_action_date, closing_by_date, closed_date)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (staff_id, reported_date, system_operation_level, complete_action_date, closing_by_date, closed_date))
    conn.commit()
    conn.close()

    return jsonify({"message": "Complaint added successfully"}), 201

# API to get all complaints
@app.route("/get_complaints", methods=["GET"])
def get_complaints():
    conn = sqlite3.connect("complaints.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM complaints")
    complaints = cursor.fetchall()
    conn.close()

    complaint_list = []
    for complaint in complaints:
        complaint_list.append({
            "staff_id": complaint[1],
            "reported_date": complaint[2],
            "system_operation_level": complaint[3],
            "complete_action_date": complaint[4] if complaint[4] else "Pending",
            "closing_by_date": complaint[5],
            "closed_date": complaint[6] if complaint[6] else "Open",
            "status": "cleared" if complaint[6] else "uncleared"
        })

    return jsonify(complaint_list)

if __name__ == "__main__":
    app.run(debug=True)
